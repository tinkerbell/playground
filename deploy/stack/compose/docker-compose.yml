version: "3"
services:
  ##### Actual services first #####
  boots:
    image: $BOOTS_IMAGE
    command: -log-level DEBUG
    network_mode: host
    environment:
      BOOTP_BIND: 0.0.0.0:67
      DATA_MODEL_VERSION: "kubernetes"
      FACILITY_CODE: sandbox
      HTTP_BIND: $TINKERBELL_HOST_IP:80
      MIRROR_BASE_URL: http://$TINKERBELL_HOST_IP:8080
      BOOTS_OSIE_PATH_OVERRIDE: http://$TINKERBELL_HOST_IP:8080
      PUBLIC_IP: $TINKERBELL_HOST_IP
      SYSLOG_BIND: $TINKERBELL_HOST_IP:514
      TFTP_BIND: $TINKERBELL_HOST_IP:69
      TINKERBELL_GRPC_AUTHORITY: $TINKERBELL_HOST_IP:42113
      TINKERBELL_TLS: "false"
      BOOTS_KUBECONFIG: /output/kubeconfig.yaml
      BOOTS_EXTRA_KERNEL_ARGS: "tink_worker_image=$TINK_WORKER_IMAGE"
    depends_on:
      tink-crds-apply:
        condition: service_completed_successfully
    volumes:
      - ./state/kube:/output
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    restart: always

  k3s:
    image: $K3S_IMAGE
    command: server --disable=traefik,servicelb,metrics-server,local-storage --tls-san=k3s
    environment:
      K3S_TOKEN: secret
      K3S_KUBECONFIG_OUTPUT: /output/kubeconfig.yaml
      K3S_KUBECONFIG_MODE: 666
    tmpfs:
      - /run
      - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    volumes:
      - k3s-server:/var/lib/rancher/k3s
      - ./state/kube:/output
    ports:
      - 6443:6443 # Kubernetes API Server
      - 8888:80 # Ingress controller port 80
      - 8443:443 # Ingress controller port 443
    healthcheck:
      test:
        - CMD-SHELL
        - kubectl get --raw='/readyz?verbose'
      interval: 1s
      timeout: 1s
      retries: 90
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    restart: unless-stopped

  hegel:
    image: $HEGEL_IMAGE
    environment:
      HEGEL_KUBECONFIG: /output/kubeconfig.yaml
      HEGEL_KUBERNETES: "https://k3s:6443"
      HEGEL_DATA_MODEL: kubernetes
    depends_on:
      tink-crds-apply:
        condition: service_completed_successfully
    volumes:
      - ./state/kube:/output
    ports:
      - 50060:50060/tcp
      - 50061:50061/tcp
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    restart: always

  tink-controller:
    image: ${TINK_CONTROLLER_IMAGE}
    environment:
      KUBECONFIG: /output/kubeconfig.yaml
      KUBERNETES: https://k3s:6443
    volumes:
      - ./state/kube:/output
    depends_on:
      tink-crds-apply:
        condition: service_completed_successfully
    restart: always

  tink-server:
    image: $TINK_SERVER_IMAGE
    environment:
      FACILITY: sandbox
      BACKEND: "kubernetes"
      TLS: "false"
      KUBECONFIG: /output/kubeconfig.yaml
      KUBERNETES: https://k3s:6443
    volumes:
      - ./state/kube:/output
    ports:
      - 42113:42113/tcp
      - 42114:42114/tcp
    depends_on:
      tink-crds-apply:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    healthcheck:
      # port needs to match TINKERBELL_HTTP_AUTHORITY
      test:
        - CMD-SHELL
        - wget -qO- 127.0.0.1:42114/healthz
      interval: 5s
      timeout: 2s
      retries: 30
    restart: always

  rufio:
    image: $RUFIO_IMAGE
    command:
      ["--kubeconfig=/output/kubeconfig.yaml", "--kubernetes=https://k3s:6443"]
    volumes:
      - ./state/kube:/output
    depends_on:
      rufio-crds-apply:
        condition: service_completed_successfully
    restart: always

  web-assets-server:
    image: nginx:alpine
    tty: true
    user: root
    ports:
      - 8080:80/tcp
    volumes:
      - ./state/boot:/usr/share/nginx/html/:ro
    depends_on:
      fetch-and-convert-ubuntu-img:
        condition: service_completed_successfully
      fetch-osie:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
    restart: unless-stopped

  ## "init" containers; they run until they accomplish their purpose and then exit
  tink-crds-apply:
    image: bitnami/kubectl:1.24.6
    command: -s "https://k3s:6443" apply -k 'github.com/tinkerbell/tink/config/crd?ref=${TINK_VERSION}'
    environment:
      KUBECONFIG: /output/kubeconfig.yaml
      KUBERNETES_SERVICE_HOST: k3s
    depends_on:
      k3s:
        condition: service_healthy
    volumes:
      - ./state/kube:/output
    restart: on-failure

  rufio-crds-apply:
    image: bitnami/kubectl:1.24.6
    command: -s "https://k3s:6443" apply -k 'github.com/tinkerbell/rufio/config/crd?ref=${RUFIO_VERSION}'
    environment:
      KUBECONFIG: /output/kubeconfig.yaml
      KUBERNETES_SERVICE_HOST: k3s
    depends_on:
      k3s:
        condition: service_healthy
    volumes:
      - ./state/kube:/output
    restart: on-failure

  manifest-update:
    image: bash:4.4
    command: -c "
      apk add gettext;
      for i in /manifests/{hardware.yaml,template.yaml,workflow.yaml}; do envsubst < $$i; echo -e '---'; done > /manifests/manifests.yaml;"
    env_file:
      - ./.env
    volumes:
      - ./manifests:/manifests
    restart: on-failure

  manifest-apply:
    image: bitnami/kubectl:1.24.6
    command: -s 'https://k3s:6443' apply -f /manifests/manifests.yaml
    environment:
      KUBECONFIG: /output/kubeconfig.yaml
      KUBERNETES_SERVICE_HOST: k3s
    depends_on:
      tink-crds-apply:
        condition: service_completed_successfully
      manifest-update:
        condition: service_completed_successfully
    volumes:
      - ./state/kube:/output
      - ./manifests:/manifests
    restart: on-failure

  fetch-osie:
    image: bash:4.4
    command: /app/fetch.sh "$OSIE_DOWNLOAD_URLS" /workdir
    volumes:
      - ./scripts/fetch-osie.sh:/app/fetch.sh:ro
      - ./state/boot:/workdir

  fetch-and-convert-ubuntu-img:
    image: bash:4.4
    entrypoint: /app/fetch.sh
    command: https://mirrors.ustc.edu.cn/ubuntu-cloud-images/daily/server/focal/current/focal-server-cloudimg-amd64.img /destination
    volumes:
      - ./scripts/fetch-ubuntu.sh:/app/fetch.sh:ro
      - ./state/boot:/destination

volumes:
  k3s-server: {}
