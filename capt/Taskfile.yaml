version: "3"

includes:
  create: ./tasks/Taskfile-create.yaml
  delete: ./tasks/Taskfile-delete.yaml
  vbmc: ./tasks/Taskfile-vbmc.yaml
  capi: ./tasks/Taskfile-capi.yaml
  capi-pivot: ./tasks/Taskfile-capi-pivot.yaml

vars:
  OUTPUT_DIR:
    sh: echo $(yq eval '.outputDir' config.yaml)
  CURR_DIR:
    sh: pwd
  STATE_FILE: ".state"
  STATE_FILE_FQ_PATH:
    sh: echo {{joinPath .CURR_DIR .STATE_FILE}}
  CONFIG_FILE_FQ_PATH:
    sh: echo {{joinPath .CURR_DIR "config.yaml"}}

tasks:
  create-playground:
    silent: true
    summary: |
      Create the CAPT playground. Use the config.yaml file to define things like cluster size and Kubernetes version.
    cmds:
      - task: system-deps-warnings
      - task: validate-binaries
      - task: ensure-output-dir
      - task: generate-state
      - task: create:playground-ordered
      - task: next-steps

  delete-playground:
    silent: true
    summary: |
      Delete the CAPT playground.
    cmds:
      - task: validate-binaries
      - task: delete:playground

  validate-binaries:
    silent: true
    summary: |
      Validate all required dependencies for the CAPT playground.
    cmds:
      - for:
          [
            "virsh",
            "docker",
            "helm",
            "kind",
            "kubectl",
            "clusterctl",
            "virt-install",
            "yq",
          ]
        cmd: command -v {{ .ITEM }} >/dev/null || echo "'{{ .ITEM }}' was not found in the \$PATH, please ensure it is installed."
        # sudo apt install virtinst # for virt-install
        # sudo apt install bridge-utils # for brctl

  system-deps-warnings:
    summary: |
      Run CAPT playground system warnings.
    silent: true
    cmds:
      - echo "Please ensure you have the following:"
      - echo "60GB of free and very fast disk space (etcd is very disk I/O sensitive)"
      - echo "8GB of free RAM"
      - echo "4 CPU cores"

  ensure-output-dir:
    summary: |
      Create the output directory.
    cmds:
      - mkdir -p {{.OUTPUT_DIR}}
      - mkdir -p {{.OUTPUT_DIR}}/xdg
    status:
      - echo ;[ -d {{.OUTPUT_DIR}} ]
      - echo ;[ -d {{.OUTPUT_DIR}}/xdg ]

  generate-state:
    summary: |
      Populate the state file.
    sources:
      - config.yaml
    generates:
      - .state
    cmds:
      - ./scripts/generate_state.sh config.yaml .state

  next-steps:
    silent: true
    summary: |
      Next steps after creating the CAPT playground.
    vars:
      NAMESPACE:
        sh: yq eval '.namespace' {{.STATE_FILE_FQ_PATH}}
      NODE_BASE:
        sh: yq eval '.vm.baseName' {{.STATE_FILE_FQ_PATH}}
      CLUSTER_NAME:
        sh: yq eval '.clusterName' {{.STATE_FILE_FQ_PATH}}
      KIND_KUBECONFIG:
        sh: yq eval '.kind.kubeconfig' {{.STATE_FILE_FQ_PATH}}
    cmds:
      - |
        echo
        echo The workload cluster is now being created.
        echo Once the cluster nodes are up and running, you will need to deploy a CNI for the cluster to be fully functional.
        echo The management cluster kubeconfig is located at: {{.KIND_KUBECONFIG}}
        echo The workload cluster kubeconfig is located at: {{.OUTPUT_DIR}}/{{.CLUSTER_NAME}}.kubeconfig
        echo
        echo 1. Watch and wait for the first control plane node to be provisioned successfully: STATE_SUCCESS
        echo "KUBECONFIG={{.KIND_KUBECONFIG}} kubectl get workflows -n {{.NAMESPACE}} -o wide -w"
        echo
        echo
        echo 2. Watch and wait for the Kubernetes API server to be ready and responding:
        echo "until KUBECONFIG={{.CURR_DIR}}/{{.OUTPUT_DIR}}/{{.CLUSTER_NAME}}.kubeconfig kubectl get node; do echo 'Waiting for Kube API server to respond...'; sleep 5; done"
        echo
        echo 3. Deploy a CNI
        echo Cilium
        echo "KUBECONFIG={{.CURR_DIR}}/{{.OUTPUT_DIR}}/{{.CLUSTER_NAME}}.kubeconfig cilium install"
        echo or KUBEROUTER
        echo "KUBECONFIG={{.CURR_DIR}}/{{.OUTPUT_DIR}}/{{.CLUSTER_NAME}}.kubeconfig kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml"
        echo
        echo 4. Watch and wait for all nodes to join the cluster and be ready:
        echo "KUBECONFIG={{.CURR_DIR}}/{{.OUTPUT_DIR}}/{{.CLUSTER_NAME}}.kubeconfig kubectl get nodes -w"
      - touch {{.OUTPUT_DIR}}/.next-steps-displayed
    status:
      - echo ;[ -f {{.OUTPUT_DIR}}/.next-steps-displayed ]

  pivot:
    silent: true
    summary: |
      Pivot the workload cluster to the permanent management cluster.
    cmds:
      - task: capi-pivot:ordered
